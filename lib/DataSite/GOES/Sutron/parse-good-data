#!/usr/bin/perl -w
use strict;
use warnings;

my $tob = '/usr/local/bin/tob';

my $store_to_objects;
while ( my $opt = shift ) {
    if ( $opt eq '--store' ) {
        $store_to_objects = 1;
        }
    else {
        die "unknown argument: $opt\n";
        }
    }

open STDIN, '<', "ingest/\@good" or die $!;

my $timestamp = <>;
# print $timestamp;

<>; # discard dcp header fields

my ($year, $day, $hour, $minute, $second) =
    $timestamp =~ m/(\d{4})-(\d{3})T(\d\d):(\d\d):(\d\d)Z/;

# prepare times for hourly, 1/2-hour, 15-min data

my $min15 = $minute - $minute % 15;
my $min30 = $minute - $minute % 30;

my $ysec_hourly = ($day-1) * 86400 + $hour * 3600;
my $ysec_last15 = ($day-1) * 86400 + ( $hour * 60 + $min15 ) * 60;
my $ysec_last30 = ($day-1) * 86400 + ( $hour * 60 + $min30 ) * 60;

# print "__time=$hour:$minute\nlast15=$hour:$min15\nlast30=$hour:$min30\nlast60=$hour:00\n";

my @tob_new_commands;

while ( <> ) {
    chomp;
    next if m/^\s*$/;

    my ( @data ) = split /[" ]?:/;

    foreach my $datum ( @data ) {
      # print "$datum\n";
        my ( $tag, $ofs_min, $interval, @values ) = split / /, $datum;
        next unless $tag;
        if ( $interval eq '#60' ) {
            warn "expected 1 value in '$datum'\n" && next
                unless @values == 1;
            $interval = 3600;
            }
        elsif ( $interval eq '#30' ) {
            warn "expected 2 values in '$datum'\n" && next
                unless @values == 2;
            $interval = 1800;
            }
        elsif ( $interval eq '#15' ) {
            warn "expected 4 values in '$datum'\n" && next
                unless @values == 4;
            $interval = 900;
            }
        else {
            warn "unsupported interval in '$datum'\n";
            }
        my $ysec = ($day-1) * 86400 + ( $hour * 60 + ($minute-$ofs_min) ) * 60;
        foreach my $value ( @values ) {
            push @tob_new_commands, 
                "$tob raw/$tag.store --time $year,$ysec -- $value";
            $ysec -= $interval;
            }

        }
    }

foreach my $command ( @tob_new_commands ) {
    print "$command\n";
    system "$command" if $store_to_objects;
    }


