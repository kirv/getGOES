#!/usr/bin/perl -w
use strict;
use warnings;

# read platform ID from %config file:
my $dcpid;
open CONFIG, '<', '%config' or die "no config file found\n";
while ( <CONFIG> ) {
    chomp;
    $dcpid = $1 if m/dcpid\s*=\s*([0-9A-Fa-f]{8})$/;
    }
close CONFIG or die "failed to close config file \%config\n";

die "no GOES DCP platform id defined for object\n"
    unless $dcpid;

my $source = shift;
$source = '@results' unless defined $source;

if ( $source eq '-' ) {
    # nothing to do, just read input from stdin
    }
elsif ( $source eq '--help' ) {
    exec "pod2text $0";
    }
elsif ( $source =~ m/^-/ ) {
    die "unknown option: $source\n";
    }
else {
    open STDIN, '<', $source
        or die "unable to open $source file in object\n";
    }

my ($header, $id, $len, $data);
while ( <> ) {
    chomp;
    
    if ( m/^($dcpid\S{24}(\d\d\d\d\d))(.*)$/ ) { # DCP response header
        print_output()
            if defined $len;
        undef $len;
        ($header, $len, $data) = ($1, $2, $3);
        $data .= "\n";
        next;
        }
    $data .= $_ . "\n";
    }

print_output()
    if defined $len;

sub print_output {
    print $header, "\n";
    print substr($data,0,$len), "\n";
    $len -= length($data) + 1; # also account for trailing newline
    printf "%${len}s\n", ' '
        if $len > 0;
    }

=head1 NAME

GOES.parse-dcp-message -- print DCP message(s) to stdout

=head1 SYNOPSIS

    parse-dcp-message [--help] [SOURCE]

=head1 DESCRIPTION

Filter @results or other specified file in GOES object, or filter 
standard input if '-' is given as source.

DCP message header is output on a line, terminated with a newline.
The message body starts on the next line, and is terminated with a
newline.  The body is of length as shown in the last header field,
padded with trailing spaces if necessary.

=head1 AUTHOR

Ken.Irving@alaska.edu, 2010

